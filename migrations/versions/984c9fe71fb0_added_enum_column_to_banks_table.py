"""added enum column to banks table

Revision ID: 984c9fe71fb0
Revises: 62607f52a3e3
Create Date: 2023-02-20 22:30:59.256549

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from app.models import MyBanks

# revision identifiers, used by Alembic.
revision = "984c9fe71fb0"
down_revision = "62607f52a3e3"
branch_labels = None
depends_on = None

# MIGRATION NOW ONLY SUPPORTS


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Add the 'name_enum' column to the 'banks' table
    op.add_column("banks", sa.Column("name_enum", sa.Text))

    # Create an Enum type with the desired values
    banks_enum = postgresql.ENUM(*[bank.value for bank in MyBanks], name="banks_enum")
    banks_enum.create(op.get_bind())

    # Update the 'name_enum' values in the 'banks' table
    for bank in MyBanks:
        op.execute(
            f"UPDATE banks SET name_enum='{bank.value}' WHERE name='{bank.value.capitalize()}';"
        )

    # Modify the 'name_enum' column to use the Enum type and be NOT NULL
    op.alter_column(
        "banks",
        "name_enum",
        type_=banks_enum,
        existing_type=sa.Text(),
        postgresql_using="name_enum::banks_enum",
        nullable=False,
    )
    op.create_unique_constraint(op.f("uq_banks_name_enum"), "banks", ["name_enum"])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_constraint(op.f("uq_banks_name_enum"), "banks", type_="unique")
    op.drop_column("banks", "name_enum")
    op.execute("""DROP TYPE banks_enum""")

    # ### end Alembic commands ###
